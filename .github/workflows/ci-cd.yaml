name: CI/CD Pipeline for All Services

on:
  push:
    branches:
      - main
    paths:
      - 'auth-service/**'
      - 'post-service/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: 'auth-service'
            path: 'auth-service'
            ecr_repo: 'auth-service'
            eb_env: 'Auth-service-env'
            eb_app: 'auth-service'
            container_port: 8080
            host_port: 8080
          - service: 'post-service'
            path: 'post-service'
            ecr_repo: 'post-service'
            eb_env: 'Post-service-env'
            eb_app: 'post-service'
            container_port: 8090
            host_port: 8090

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check for changes in the service directory
      id: check_changes
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "^${{ matrix.path }}"; then
          echo "::set-output name=has_changes::true"
        else
          echo "::set-output name=has_changes::false"
        fi

    - name: Configure AWS credentials
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: aws-actions/amazon-ecr-login@v1
      id: login-ecr

    - name: Build, tag, and push Docker image to Amazon ECR
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        docker build ./${{ matrix.path }} -t ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:${{ github.sha }} -t ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:latest
        docker push -a ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}

    - name: Generate deployment package
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        sed "s|{{IMAGE_NAME}}|${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:latest|g" Dockerrun.aws.template.json |
        sed "s|{{CONTAINER_PORT}}|${{ matrix.container_port }}|g" |
        sed "s|{{HOST_PORT}}|${{ matrix.host_port }}|g" > Dockerrun.aws.json
        zip deploy.zip Dockerrun.aws.json

    - name: Deploy Docker image to Elastic Beanstalk
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: us-east-1
        application_name: ${{ matrix.eb_app }}
        environment_name: ${{ matrix.eb_env }}
        version_label: ${{ github.sha }}
        deployment_package: deploy.zip
        use_existing_version_if_available: true
